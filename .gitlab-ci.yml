image: $CI_GROUP_DOCKER

services:
    - name: $CI_GROUP_DOCKER_DIND
      alias: docker

stages:
    - build
    - test
    - release
    - publish

variables:
    APP_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    APP_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
    AWS_ECR_IMAGE: $AWS_ECR_REGISTRY/foxes-knowledge-api:latest
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ''

cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
        - vendor/
    policy: pull-push

.install_compose: &install_compose
    - apk add --no-cache docker-compose
    - docker-compose version

.load_images: &load_images
    - docker load -i build-production.tar || true
    - docker load -i build-development.tar || true
    - docker load -i pull.tar || true

before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - cp .env.example .env
    - docker version

Build production image:
    stage: build
    tags:
        - docker
    script:
        - docker build --no-cache -f docker/Dockerfile --target production -t $APP_IMAGE .
        - docker save -o build-production.tar $APP_IMAGE
    needs: []
    artifacts:
        paths:
            - build-production.tar

Build development image:
    stage: build
    tags:
        - docker
    script:
        - docker build --no-cache -f docker/Dockerfile --target development -t $APP_IMAGE .
        - docker save -o build-development.tar $APP_IMAGE
    needs: []
    artifacts:
        paths:
            - build-development.tar

Pull images:
    stage: build
    tags:
        - docker
    script:
        - *install_compose
        - docker-compose pull postgres
        - docker save -o pull.tar postgres
    needs: []
    artifacts:
        paths:
            - pull.tar

Release image:
    stage: release
    when: on_success
    tags:
        - docker
    script:
        - *load_images
        - docker tag $APP_IMAGE $APP_RELEASE_IMAGE
        - docker push $APP_RELEASE_IMAGE
        - docker push $APP_IMAGE
    needs:
        - job: Build production image
          artifacts: true

Publish image:
    stage: publish
    when: on_success
    image:
        name: amazon/aws-cli:2.7.3
        entrypoint: [""]
    tags:
        - docker
    before_script:
        - amazon-linux-extras install docker
        - aws --version
        - docker --version
    script:
        - *load_images
        - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
        - docker tag $APP_IMAGE $AWS_ECR_IMAGE
        - docker push $AWS_ECR_IMAGE
    needs:
        - job: Build production image
          artifacts: true
    only:
        - master
